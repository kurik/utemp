#!/bin/bash

SQLC="/usr/bin/sqlite3"
BZIP2="/usr/bin/bzip2"
LOGGER="/usr/bin/logger"
LOGTAG="UTEMP:$(basename $0)"

function log {
    echo $* | "${LOGGER}" -t "${LOGTAG}"
}

function help() {
    echo "$0 <options> [day]" >&2
    echo "  day ... archive check point day" >&2
    echo "          format of the day is YYYY-MM-DD" >&2
    echo "          The default is the last day of the previous month" >&2
    echo "Options:" >&2
    echo "  -c|--current <database>  ... the database with current data" >&2
    echo "  -a|--archive <prefix>    ... file prefix to store archives" >&2
    echo "                               The default is './archive'" >&2
    echo "  -g <day|week|month|year> ... granularity of the archive files" >&2
    echo "                               The default is 'month'" >&2
    echo "  -f|--format <csv|db|sql> ... format of the archive files" >&2
    echo "                               The default is 'sql'" >&2
    echo "  -r|--remove              ... remove archived records from the current database" >&2
    echo "  -C|--compress            ... compress the archive" >&2
    exit $1
}

# Parse command line
DATABASE="current.db"
PREFIX="./archive"
GRANULARITY="month"
FORMAT="sql"
REMOVE=""
COMPRESS=""
DAY=$(date +'%Y-%m-%d' -d "-$(date +%d) days")
while [[ $# -ne 0 ]]; do
    case "$1" in
        "-c"|"--current")
            shift
            DATABASE="$1"
            ;;
        "-a"|"--archive")
            shift
            PREFIX="$1"
            ;;
        "-g")
            shift
            case "$1" in
                "day"|"week"|"month"|"year")
                    GRANULARITY="$1"
                    ;;
                *)
                    echo "Invalid granularity"
                    help 1
                    ;;
            esac
            ;;
        "-f"|"--format")
            shift
            case "$1" in
                "csv"|"db"|"sql")
                    FORMAT="$1"
                    ;;
                *)
                    echo "Invalid archive format"
                    help 1
                    ;;
            esac
            ;;
        "-r"|"--remove")
            REMOVE="1"
            ;;
        "-C"|"--compress")
            COMPRESS="1"
            ;;
        "--help")
            help 0
            ;;
        [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])
            DAY="$1"
            ;;
        *)
            echo "Invalid parameter '$1'" >&2
            help 1
            ;;
    esac
    shift
done

# Check mandatory parameters
[[ -z "${DATABASE}" ]] && { echo "Missing mandatory database parameter '-c'" >&2; help 1; }

#
# Returns list of time quantas
#
function get_time_quantas() {
    local qstr

    log "Calculating time quantas for granularity '${GRANULARITY}'"
    case "${GRANULARITY}" in
        "day")
            qstr="%Y-%m-%d"
            ;;
        "week")
            qstr="%Y-%W"
            ;;
        "month")
            qstr="%Y-%m"
            ;;
        "year")
            qstr="%Y"
            ;;
        *)
            echo "Invalid granularity in get_time_quantas(): ${GRANULARITY}" >&2
            exit 1
            ;;
    esac
    echo "SELECT strftime('${qstr}', stamputc, 'localtime') AS stamp
        FROM temperature
        WHERE stamputc <= datetime('${DAY} 23:59:59', 'utc')
        GROUP BY stamp
        ORDER BY stamp;" | "${SQLC}" "${DATABASE}"
    if [[ $? -eq 0 ]]; then
        log "Calculation is done"
        return 0
    else
        log "Unknown error when querying database ${DATABASE}" 
        return 1
    fi
}

#
# Returns list of archive files needed to store all the values
# Parameters: list of time quantas
#
function get_list_of_archives() {
    local arch_list
    local suffix

    case "${GRANULARITY}" in
        "week")
            suffix="w.${FORMAT}"
            ;;
        "month")
            suffix="m.${FORMAT}"
            ;;
        *)
            suffix=".${FORMAT}"
            ;;
    esac
    for f in ${*}; do
        echo "${PREFIX}${f}${suffix}"
    done

    return 0
}

#
# Print sqlite3 commands (including SQL) to archive a time quantum
# Works as an wrapper for different output formats
# Parameter #1: The file to archive to
# Parameter #2: Time quantum to archive
#
function archive_quantum() {
    local g

    log "Archiving to '$1' using granularity '${GRANULARITY}' and format '${FORMAT}'"
    case "${GRANULARITY}" in
        "day")
            g="%Y-%m-%d"
            ;;
        "week")
            g="%Y-%W"
            ;;
        "month")
            g="%Y-%m"
            ;;
        "year")
            g="%Y"
            ;;
    esac

    case "${FORMAT}" in
        "db")
            archive_quantum_db "${g}" $* || return $?
            ;;
        "sql")
            archive_quantum_sql "${g}" $* || return $?
            ;;
        "csv")
            archive_quantum_csv "${g}" $* || return $?
            ;;
    esac
    log "Archivation is done"
    # Compress the file if requested and the file has any content
    if [[ -s "${1}" ]]; then
        if [[ -n "${COMPRESS}" ]]; then
            log "Compressing the archived file '$1'"
            "${BZIP2}" "${1}"
            log "Compression is done"
        fi
    else
        log "The archive has no content, removing"
        rm -f "${1}"
    fi
    return 0
}

function archive_quantum_csv() {
    {
    echo ".mode csv"
    echo "SELECT * FROM temperature
        WHERE strftime('${1}', stamputc, 'localtime') = '${3}';"
    [[ -n "${REMOVE}" ]] && \
        echo "DELETE FROM temperature WHERE strftime('${1}', stamputc, 'localtime') = '${3}';"
    } | "${SQLC}" "${DATABASE}" >> "${2}"

    return $?
}

function archive_quantum_sql() {
    {
    echo ".mode insert"
    echo "SELECT * FROM temperature
        WHERE strftime('${1}', stamputc, 'localtime') = '${3}';"
    [[ -n "${REMOVE}" ]] && \
        echo "DELETE FROM temperature WHERE strftime('${1}', stamputc, 'localtime') = '${3}';"
    } | "${SQLC}" "${DATABASE}" >> "${2}"

    return $?
}

function archive_quantum_db() {
    {
    echo "ATTACH '${DATABASE}' AS db;"

    echo "CREATE TABLE IF NOT EXISTS temperature(
        id INTEGER,
        stamputc TEXT,
        temperature REAL,
        sensor TEXT);"

    echo "INSERT INTO temperature
        SELECT * FROM db.temperature
        WHERE strftime('${1}', stamputc, 'localtime') = '${3}';"

    [[ -n "${REMOVE}" ]] && \
        echo "DELETE FROM db.temperature WHERE strftime('${1}', stamputc, 'localtime') = '${3}';"

    echo "DETACH db;"
    } | "${SQLC}" "${2}"

    return $?
}

TIME_QUANTAS=$(get_time_quantas)

for q in ${TIME_QUANTAS}; do
    archive_quantum "$(get_list_of_archives ${q})" "${q}"
done

exit 0
#EOF
