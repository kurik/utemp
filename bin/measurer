#!/bin/bash

W1_BUS='/sys/bus/w1/devices'
SQLITE="/usr/bin/sqlite3"
DB="/mnt/utemp/var/current.db"
LOGGER="/usr/bin/logger"
LOGTAG="UTEMP:$(basename $0)"
CREATE=""
RETRIES=3 # Number of retries when read from a sensor fails

function help {
        echo "$0 [options] <database>" >&2
        echo "Options:" >&2
        echo "   -c|--create ... Create the DB if it is not already created" >&2
        echo "Parameters:" >&2
        echo "   database    ... the database file to insert the measured values into" >&2
        exit $1
}

function createdb {
    cat << EOL
CREATE TABLE IF NOT EXISTS temperature(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    stamputc TEXT DEFAULT CURRENT_TIMESTAMP,
    temperature REAL,
    sensor TEXT);
CREATE INDEX IF NOT EXISTS stamputc_idx on temperature (stamputc);
CREATE INDEX IF NOT EXISTS sensor_idx on temperature (sensor);
EOL
}

function measure {
    local sensor
    local measurement
    local stat
    local temperature

    # Exits immediatelly if no sensor is available
    ls ${W1_BUS}/*/w1_slave >& /dev/null || return 1

    log "Starting to measure temperature"
    i=0
    # Read data from all the available sensors
    for sensor in ${W1_BUS}/*/w1_slave; do
        err=${RETRIES}
        while [[ ${err} -ne 0 ]]; do
            measurement=$(cat "${sensor}")
            stat=$(echo "${measurement}"|head -1|cut -d ' ' -f 12)
            if [[ "${stat}" = "YES" ]]; then
                sensor=$(echo "${sensor}" | cut -d '/' -f 6)
                temperature=$(echo "${measurement}"|tail -1|cut -d '=' -f 2)
                if [[ ${temperature} -gt 80000 ]]; then
                    # Sensor error
                    attempt=$(( ${RETRIES} - ${err} + 1))
                    log "Reading of temperature from sensor ${sensor} failed (Temperature too high: ${temperature})"
                    log "Retry attempt #${attempt}"
                    err=$(( ${err} - 1 ))
                    sleep ${attempt} # Progressive attempt
                else
                    # OK
                    echo ${sensor} ${temperature}
                    err=0
                fi
            else
                # Sensor error
                attempt=$(( ${RETRIES} - ${err} + 1))
                log "Reading of temperature from sensor ${sensor} failed (Error code received)"
                log "Retry attempt #${attempt}"
                err=$(( ${err} - 1 ))
                sleep ${attempt} # Progressive attempt
            fi
        done
        i=$(( $i + 1 ))
    done
    log "Temperature measured for $i sensors"
    return 0
}

function printsql {
    measure | while read sensor temperature; do
        echo -n "INSERT INTO temperature(stamputc, temperature, sensor) VALUES('"
        echo -n $(date -u +'%Y-%m-%d %H:%M:%S')
        echo "',${temperature},'${sensor}');"
    done
}

function log {
    echo $* | "${LOGGER}" -t "${LOGTAG}"
}

# Parse command line
while [[ $# -ne 0 ]]; do
    case "$1" in
        -c|--create)
            CREATE="yes"
            ;;
        *)
            DB="${1}"
    esac
    shift
done

# Create DB if required
if [[ -n "${CREATE}" ]]; then
    log "Creating database ${DB}"
    createdb | "${SQLITE}" "${DB}"
    ERR=$?
    [[ ${ERR} -ne 0 ]] && { log "Creation of database ${DB} has failed"; exit ${ERR}; }
fi

# Do the measurement and save the results in DB
printsql | "${SQLITE}" "${DB}"
ERR=$?
[[ ${ERR} -ne 0 ]] && { log "Save of measured values has failed"; exit ${ERR}; }
log "Measured values saved into ${DB}"

exit 0
#EOF
